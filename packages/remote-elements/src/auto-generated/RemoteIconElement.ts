/* prettier-ignore */
/* This file is auto-generated with the remote-components-generator */
import { FlowRemoteElement } from "@/lib/FlowRemoteElement";
import type { IconProps as RemoteIconElementProps } from "@mittwald/flow-react-components/Icon";
export type { IconProps as RemoteIconElementProps } from "@mittwald/flow-react-components/Icon";

export class RemoteIconElement extends FlowRemoteElement<RemoteIconElementProps> {
  static get remoteProperties() {
    return {
      size: {},
      string: {},
      offset: {},
      "aria-label": {},
      "aria-labelledby": {},
      "aria-describedby": {},
      "aria-details": {},
      end: {},
      id: {},
      width: {},
      spacing: {},
      clipPath: {},
      filter: {},
      mask: {},
      path: {},
      suppressHydrationWarning: {},
      lang: {},
      tabIndex: {},
      role: {},
      color: {},
      "aria-activedescendant": {},
      "aria-atomic": {},
      "aria-autocomplete": {},
      "aria-braillelabel": {},
      "aria-brailleroledescription": {},
      "aria-busy": {},
      "aria-checked": {},
      "aria-colcount": {},
      "aria-colindex": {},
      "aria-colindextext": {},
      "aria-colspan": {},
      "aria-controls": {},
      "aria-current": {},
      "aria-description": {},
      "aria-disabled": {},
      "aria-dropeffect": {},
      "aria-errormessage": {},
      "aria-expanded": {},
      "aria-flowto": {},
      "aria-grabbed": {},
      "aria-haspopup": {},
      "aria-hidden": {},
      "aria-invalid": {},
      "aria-keyshortcuts": {},
      "aria-level": {},
      "aria-live": {},
      "aria-modal": {},
      "aria-multiline": {},
      "aria-multiselectable": {},
      "aria-orientation": {},
      "aria-owns": {},
      "aria-placeholder": {},
      "aria-posinset": {},
      "aria-pressed": {},
      "aria-readonly": {},
      "aria-relevant": {},
      "aria-required": {},
      "aria-roledescription": {},
      "aria-rowcount": {},
      "aria-rowindex": {},
      "aria-rowindextext": {},
      "aria-rowspan": {},
      "aria-selected": {},
      "aria-setsize": {},
      "aria-sort": {},
      "aria-valuemax": {},
      "aria-valuemin": {},
      "aria-valuenow": {},
      "aria-valuetext": {},
      height: {},
      max: {},
      media: {},
      method: {},
      min: {},
      target: {},
      type: {},
      crossOrigin: {},
      accentHeight: {},
      accumulate: {},
      additive: {},
      alignmentBaseline: {},
      allowReorder: {},
      alphabetic: {},
      amplitude: {},
      arabicForm: {},
      ascent: {},
      attributeName: {},
      attributeType: {},
      autoReverse: {},
      azimuth: {},
      baseFrequency: {},
      baselineShift: {},
      baseProfile: {},
      bbox: {},
      begin: {},
      bias: {},
      by: {},
      calcMode: {},
      capHeight: {},
      clip: {},
      clipPathUnits: {},
      clipRule: {},
      colorInterpolation: {},
      colorInterpolationFilters: {},
      colorProfile: {},
      colorRendering: {},
      contentScriptType: {},
      contentStyleType: {},
      cursor: {},
      cx: {},
      cy: {},
      d: {},
      decelerate: {},
      descent: {},
      diffuseConstant: {},
      direction: {},
      display: {},
      divisor: {},
      dominantBaseline: {},
      dur: {},
      dx: {},
      dy: {},
      edgeMode: {},
      elevation: {},
      enableBackground: {},
      exponent: {},
      externalResourcesRequired: {},
      fill: {},
      fillOpacity: {},
      fillRule: {},
      filterRes: {},
      filterUnits: {},
      floodColor: {},
      floodOpacity: {},
      focusable: {},
      fontFamily: {},
      fontSize: {},
      fontSizeAdjust: {},
      fontStretch: {},
      fontStyle: {},
      fontVariant: {},
      fontWeight: {},
      format: {},
      fr: {},
      from: {},
      fx: {},
      fy: {},
      g1: {},
      g2: {},
      glyphName: {},
      glyphOrientationHorizontal: {},
      glyphOrientationVertical: {},
      glyphRef: {},
      gradientTransform: {},
      gradientUnits: {},
      hanging: {},
      horizAdvX: {},
      horizOriginX: {},
      href: {},
      ideographic: {},
      imageRendering: {},
      in2: {},
      in: {},
      intercept: {},
      k1: {},
      k2: {},
      k3: {},
      k4: {},
      k: {},
      kernelMatrix: {},
      kernelUnitLength: {},
      kerning: {},
      keyPoints: {},
      keySplines: {},
      keyTimes: {},
      lengthAdjust: {},
      letterSpacing: {},
      lightingColor: {},
      limitingConeAngle: {},
      local: {},
      markerEnd: {},
      markerHeight: {},
      markerMid: {},
      markerStart: {},
      markerUnits: {},
      markerWidth: {},
      maskContentUnits: {},
      maskUnits: {},
      mathematical: {},
      mode: {},
      numOctaves: {},
      opacity: {},
      operator: {},
      order: {},
      orient: {},
      orientation: {},
      origin: {},
      overflow: {},
      overlinePosition: {},
      overlineThickness: {},
      paintOrder: {},
      panose1: {},
      pathLength: {},
      patternContentUnits: {},
      patternTransform: {},
      patternUnits: {},
      pointerEvents: {},
      points: {},
      pointsAtX: {},
      pointsAtY: {},
      pointsAtZ: {},
      preserveAlpha: {},
      preserveAspectRatio: {},
      primitiveUnits: {},
      r: {},
      radius: {},
      refX: {},
      refY: {},
      renderingIntent: {},
      repeatCount: {},
      repeatDur: {},
      requiredExtensions: {},
      requiredFeatures: {},
      restart: {},
      result: {},
      rotate: {},
      rx: {},
      ry: {},
      scale: {},
      seed: {},
      shapeRendering: {},
      slope: {},
      specularConstant: {},
      specularExponent: {},
      speed: {},
      spreadMethod: {},
      startOffset: {},
      stdDeviation: {},
      stemh: {},
      stemv: {},
      stitchTiles: {},
      stopColor: {},
      stopOpacity: {},
      strikethroughPosition: {},
      strikethroughThickness: {},
      stroke: {},
      strokeDasharray: {},
      strokeDashoffset: {},
      strokeLinecap: {},
      strokeLinejoin: {},
      strokeMiterlimit: {},
      strokeOpacity: {},
      strokeWidth: {},
      surfaceScale: {},
      systemLanguage: {},
      tableValues: {},
      targetX: {},
      targetY: {},
      textAnchor: {},
      textDecoration: {},
      textLength: {},
      textRendering: {},
      to: {},
      transform: {},
      u1: {},
      u2: {},
      underlinePosition: {},
      underlineThickness: {},
      unicode: {},
      unicodeBidi: {},
      unicodeRange: {},
      unitsPerEm: {},
      vAlphabetic: {},
      values: {},
      vectorEffect: {},
      version: {},
      vertAdvY: {},
      vertOriginX: {},
      vertOriginY: {},
      vHanging: {},
      vIdeographic: {},
      viewBox: {},
      viewTarget: {},
      visibility: {},
      vMathematical: {},
      widths: {},
      wordSpacing: {},
      writingMode: {},
      x1: {},
      x2: {},
      x: {},
      xChannelSelector: {},
      xHeight: {},
      xlinkActuate: {},
      xlinkArcrole: {},
      xlinkHref: {},
      xlinkRole: {},
      xlinkShow: {},
      xlinkTitle: {},
      xlinkType: {},
      xmlBase: {},
      xmlLang: {},
      xmlns: {},
      xmlnsXlink: {},
      xmlSpace: {},
      y1: {},
      y2: {},
      y: {},
      yChannelSelector: {},
      z: {},
      zoomAndPan: {},
    };
  }

  static get remoteEvents() {
    return {
      focus: {},
      blur: {},
      keyDown: {},
      keyUp: {},
      change: {},
      copy: {},
      copyCapture: {},
      cut: {},
      cutCapture: {},
      paste: {},
      pasteCapture: {},
      compositionEnd: {},
      compositionEndCapture: {},
      compositionStart: {},
      compositionStartCapture: {},
      compositionUpdate: {},
      compositionUpdateCapture: {},
      focusCapture: {},
      blurCapture: {},
      changeCapture: {},
      beforeInput: {},
      beforeInputCapture: {},
      input: {},
      inputCapture: {},
      reset: {},
      resetCapture: {},
      submit: {},
      submitCapture: {},
      invalid: {},
      invalidCapture: {},
      load: {},
      loadCapture: {},
      error: {},
      errorCapture: {},
      keyDownCapture: {},
      keyPress: {},
      keyPressCapture: {},
      keyUpCapture: {},
      abort: {},
      abortCapture: {},
      canPlay: {},
      canPlayCapture: {},
      canPlayThrough: {},
      canPlayThroughCapture: {},
      durationChange: {},
      durationChangeCapture: {},
      emptied: {},
      emptiedCapture: {},
      encrypted: {},
      encryptedCapture: {},
      ended: {},
      endedCapture: {},
      loadedData: {},
      loadedDataCapture: {},
      loadedMetadata: {},
      loadedMetadataCapture: {},
      loadStart: {},
      loadStartCapture: {},
      pause: {},
      pauseCapture: {},
      play: {},
      playCapture: {},
      playing: {},
      playingCapture: {},
      progress: {},
      progressCapture: {},
      rateChange: {},
      rateChangeCapture: {},
      resize: {},
      resizeCapture: {},
      seeked: {},
      seekedCapture: {},
      seeking: {},
      seekingCapture: {},
      stalled: {},
      stalledCapture: {},
      suspend: {},
      suspendCapture: {},
      timeUpdate: {},
      timeUpdateCapture: {},
      volumeChange: {},
      volumeChangeCapture: {},
      waiting: {},
      waitingCapture: {},
      auxClick: {},
      auxClickCapture: {},
      click: {},
      clickCapture: {},
      contextMenu: {},
      contextMenuCapture: {},
      doubleClick: {},
      doubleClickCapture: {},
      drag: {},
      dragCapture: {},
      dragEnd: {},
      dragEndCapture: {},
      dragEnter: {},
      dragEnterCapture: {},
      dragExit: {},
      dragExitCapture: {},
      dragLeave: {},
      dragLeaveCapture: {},
      dragOver: {},
      dragOverCapture: {},
      dragStart: {},
      dragStartCapture: {},
      drop: {},
      dropCapture: {},
      mouseDown: {},
      mouseDownCapture: {},
      mouseEnter: {},
      mouseLeave: {},
      mouseMove: {},
      mouseMoveCapture: {},
      mouseOut: {},
      mouseOutCapture: {},
      mouseOver: {},
      mouseOverCapture: {},
      mouseUp: {},
      mouseUpCapture: {},
      select: {},
      selectCapture: {},
      touchCancel: {},
      touchCancelCapture: {},
      touchEnd: {},
      touchEndCapture: {},
      touchMove: {},
      touchMoveCapture: {},
      touchStart: {},
      touchStartCapture: {},
      pointerDown: {},
      pointerDownCapture: {},
      pointerMove: {},
      pointerMoveCapture: {},
      pointerUp: {},
      pointerUpCapture: {},
      pointerCancel: {},
      pointerCancelCapture: {},
      pointerEnter: {},
      pointerLeave: {},
      pointerOver: {},
      pointerOverCapture: {},
      pointerOut: {},
      pointerOutCapture: {},
      gotPointerCapture: {},
      gotPointerCaptureCapture: {},
      lostPointerCapture: {},
      lostPointerCaptureCapture: {},
      scroll: {},
      scrollCapture: {},
      wheel: {},
      wheelCapture: {},
      animationStart: {},
      animationStartCapture: {},
      animationEnd: {},
      animationEndCapture: {},
      animationIteration: {},
      animationIterationCapture: {},
      toggle: {},
      beforeToggle: {},
      transitionCancel: {},
      transitionCancelCapture: {},
      transitionEnd: {},
      transitionEndCapture: {},
      transitionRun: {},
      transitionRunCapture: {},
      transitionStart: {},
      transitionStartCapture: {},
    };
  }

  static get remoteSlots() {
    return [];
  }
}

declare global {
  interface HTMLElementTagNameMap {
    "flr-icon": InstanceType<typeof RemoteIconElement>;
  }
}

customElements.define("flr-icon", RemoteIconElement);
