/* prettier-ignore */
/* This file is auto-generated with the remote-components-generator */
"use client";
import createFlowRemoteComponent from "@/components/createFlowRemoteComponent";
import { RemoteItemsGridListItemElement } from "@mittwald/flow-remote-elements";
export { type RemoteItemsGridListItemElement } from "@mittwald/flow-remote-elements";

export const ItemsGridListItem = createFlowRemoteComponent(
  "flr-items-grid-list-item",
  "ItemsGridListItem",
  {
    clearPropsContext: false,
  },
  RemoteItemsGridListItemElement,
  {
    slotProps: {
      wrapper: "flr-slot-root-wrapper",
    },
    eventProps: {
      onAction: { event: "action" } as never,
      onAnimationEnd: { event: "animationEnd" } as never,
      onAnimationEndCapture: { event: "animationEndCapture" } as never,
      onAnimationIteration: { event: "animationIteration" } as never,
      onAnimationIterationCapture: {
        event: "animationIterationCapture",
      } as never,
      onAnimationStart: { event: "animationStart" } as never,
      onAnimationStartCapture: { event: "animationStartCapture" } as never,
      onAuxClick: { event: "auxClick" } as never,
      onAuxClickCapture: { event: "auxClickCapture" } as never,
      onClick: { event: "click" } as never,
      onClickCapture: { event: "clickCapture" } as never,
      onContextMenu: { event: "contextMenu" } as never,
      onContextMenuCapture: { event: "contextMenuCapture" } as never,
      onDoubleClick: { event: "doubleClick" } as never,
      onDoubleClickCapture: { event: "doubleClickCapture" } as never,
      onGotPointerCapture: { event: "gotPointerCapture" } as never,
      onGotPointerCaptureCapture: {
        event: "gotPointerCaptureCapture",
      } as never,
      onHoverChange: { event: "hoverChange" } as never,
      onHoverEnd: { event: "hoverEnd" } as never,
      onHoverStart: { event: "hoverStart" } as never,
      onLostPointerCapture: { event: "lostPointerCapture" } as never,
      onLostPointerCaptureCapture: {
        event: "lostPointerCaptureCapture",
      } as never,
      onMouseDown: { event: "mouseDown" } as never,
      onMouseDownCapture: { event: "mouseDownCapture" } as never,
      onMouseEnter: { event: "mouseEnter" } as never,
      onMouseLeave: { event: "mouseLeave" } as never,
      onMouseMove: { event: "mouseMove" } as never,
      onMouseMoveCapture: { event: "mouseMoveCapture" } as never,
      onMouseOut: { event: "mouseOut" } as never,
      onMouseOutCapture: { event: "mouseOutCapture" } as never,
      onMouseOver: { event: "mouseOver" } as never,
      onMouseOverCapture: { event: "mouseOverCapture" } as never,
      onMouseUp: { event: "mouseUp" } as never,
      onMouseUpCapture: { event: "mouseUpCapture" } as never,
      onPointerCancel: { event: "pointerCancel" } as never,
      onPointerCancelCapture: { event: "pointerCancelCapture" } as never,
      onPointerDown: { event: "pointerDown" } as never,
      onPointerDownCapture: { event: "pointerDownCapture" } as never,
      onPointerEnter: { event: "pointerEnter" } as never,
      onPointerLeave: { event: "pointerLeave" } as never,
      onPointerMove: { event: "pointerMove" } as never,
      onPointerMoveCapture: { event: "pointerMoveCapture" } as never,
      onPointerOut: { event: "pointerOut" } as never,
      onPointerOutCapture: { event: "pointerOutCapture" } as never,
      onPointerOver: { event: "pointerOver" } as never,
      onPointerOverCapture: { event: "pointerOverCapture" } as never,
      onPointerUp: { event: "pointerUp" } as never,
      onPointerUpCapture: { event: "pointerUpCapture" } as never,
      onPress: { event: "press" } as never,
      onPressChange: { event: "pressChange" } as never,
      onPressEnd: { event: "pressEnd" } as never,
      onPressStart: { event: "pressStart" } as never,
      onPressUp: { event: "pressUp" } as never,
      onScroll: { event: "scroll" } as never,
      onScrollCapture: { event: "scrollCapture" } as never,
      onTouchCancel: { event: "touchCancel" } as never,
      onTouchCancelCapture: { event: "touchCancelCapture" } as never,
      onTouchEnd: { event: "touchEnd" } as never,
      onTouchEndCapture: { event: "touchEndCapture" } as never,
      onTouchMove: { event: "touchMove" } as never,
      onTouchMoveCapture: { event: "touchMoveCapture" } as never,
      onTouchStart: { event: "touchStart" } as never,
      onTouchStartCapture: { event: "touchStartCapture" } as never,
      onTransitionCancel: { event: "transitionCancel" } as never,
      onTransitionCancelCapture: { event: "transitionCancelCapture" } as never,
      onTransitionEnd: { event: "transitionEnd" } as never,
      onTransitionEndCapture: { event: "transitionEndCapture" } as never,
      onTransitionRun: { event: "transitionRun" } as never,
      onTransitionRunCapture: { event: "transitionRunCapture" } as never,
      onTransitionStart: { event: "transitionStart" } as never,
      onTransitionStartCapture: { event: "transitionStartCapture" } as never,
      onWheel: { event: "wheel" } as never,
      onWheelCapture: { event: "wheelCapture" } as never,
    },
  },
);
