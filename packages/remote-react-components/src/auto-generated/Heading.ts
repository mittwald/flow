/* prettier-ignore */
/* This file is auto-generated with the remote-components-generator */
"use client";
import createFlowRemoteComponent from "@/components/createFlowRemoteComponent";
import { RemoteHeadingElement } from "@mittwald/flow-remote-elements";
export type { RemoteHeadingElement } from "@mittwald/flow-remote-elements";

export const Heading = createFlowRemoteComponent(
  "flr-heading",
  "Heading",
  {
    clearPropsContext: true,
  },
  RemoteHeadingElement,
  {
    slotProps: {
      wrapper: "flr-slot-root-wrapper",
    },
    eventProps: {
      onAbort: { event: "abort" } as never,
      onAbortCapture: { event: "abortCapture" } as never,
      onAnimationEnd: { event: "animationEnd" } as never,
      onAnimationEndCapture: { event: "animationEndCapture" } as never,
      onAnimationIteration: { event: "animationIteration" } as never,
      onAnimationIterationCapture: {
        event: "animationIterationCapture",
      } as never,
      onAnimationStart: { event: "animationStart" } as never,
      onAnimationStartCapture: { event: "animationStartCapture" } as never,
      onAuxClick: { event: "auxClick" } as never,
      onAuxClickCapture: { event: "auxClickCapture" } as never,
      onBeforeInput: { event: "beforeInput" } as never,
      onBeforeInputCapture: { event: "beforeInputCapture" } as never,
      onBeforeToggle: { event: "beforeToggle" } as never,
      onBlur: { event: "blur" } as never,
      onBlurCapture: { event: "blurCapture" } as never,
      onCanPlay: { event: "canPlay" } as never,
      onCanPlayCapture: { event: "canPlayCapture" } as never,
      onCanPlayThrough: { event: "canPlayThrough" } as never,
      onCanPlayThroughCapture: { event: "canPlayThroughCapture" } as never,
      onChange: { event: "change" } as never,
      onChangeCapture: { event: "changeCapture" } as never,
      onClick: { event: "click" } as never,
      onClickCapture: { event: "clickCapture" } as never,
      onCompositionEnd: { event: "compositionEnd" } as never,
      onCompositionEndCapture: { event: "compositionEndCapture" } as never,
      onCompositionStart: { event: "compositionStart" } as never,
      onCompositionStartCapture: { event: "compositionStartCapture" } as never,
      onCompositionUpdate: { event: "compositionUpdate" } as never,
      onCompositionUpdateCapture: {
        event: "compositionUpdateCapture",
      } as never,
      onContextMenu: { event: "contextMenu" } as never,
      onContextMenuCapture: { event: "contextMenuCapture" } as never,
      onCopy: { event: "copy" } as never,
      onCopyCapture: { event: "copyCapture" } as never,
      onCut: { event: "cut" } as never,
      onCutCapture: { event: "cutCapture" } as never,
      onDoubleClick: { event: "doubleClick" } as never,
      onDoubleClickCapture: { event: "doubleClickCapture" } as never,
      onDrag: { event: "drag" } as never,
      onDragCapture: { event: "dragCapture" } as never,
      onDragEnd: { event: "dragEnd" } as never,
      onDragEndCapture: { event: "dragEndCapture" } as never,
      onDragEnter: { event: "dragEnter" } as never,
      onDragEnterCapture: { event: "dragEnterCapture" } as never,
      onDragExit: { event: "dragExit" } as never,
      onDragExitCapture: { event: "dragExitCapture" } as never,
      onDragLeave: { event: "dragLeave" } as never,
      onDragLeaveCapture: { event: "dragLeaveCapture" } as never,
      onDragOver: { event: "dragOver" } as never,
      onDragOverCapture: { event: "dragOverCapture" } as never,
      onDragStart: { event: "dragStart" } as never,
      onDragStartCapture: { event: "dragStartCapture" } as never,
      onDrop: { event: "drop" } as never,
      onDropCapture: { event: "dropCapture" } as never,
      onDurationChange: { event: "durationChange" } as never,
      onDurationChangeCapture: { event: "durationChangeCapture" } as never,
      onEmptied: { event: "emptied" } as never,
      onEmptiedCapture: { event: "emptiedCapture" } as never,
      onEncrypted: { event: "encrypted" } as never,
      onEncryptedCapture: { event: "encryptedCapture" } as never,
      onEnded: { event: "ended" } as never,
      onEndedCapture: { event: "endedCapture" } as never,
      onError: { event: "error" } as never,
      onErrorCapture: { event: "errorCapture" } as never,
      onFocus: { event: "focus" } as never,
      onFocusCapture: { event: "focusCapture" } as never,
      onGotPointerCapture: { event: "gotPointerCapture" } as never,
      onGotPointerCaptureCapture: {
        event: "gotPointerCaptureCapture",
      } as never,
      onInput: { event: "input" } as never,
      onInputCapture: { event: "inputCapture" } as never,
      onInvalid: { event: "invalid" } as never,
      onInvalidCapture: { event: "invalidCapture" } as never,
      onKeyDown: { event: "keyDown" } as never,
      onKeyDownCapture: { event: "keyDownCapture" } as never,
      onKeyPress: { event: "keyPress" } as never,
      onKeyPressCapture: { event: "keyPressCapture" } as never,
      onKeyUp: { event: "keyUp" } as never,
      onKeyUpCapture: { event: "keyUpCapture" } as never,
      onLoad: { event: "load" } as never,
      onLoadCapture: { event: "loadCapture" } as never,
      onLoadStart: { event: "loadStart" } as never,
      onLoadStartCapture: { event: "loadStartCapture" } as never,
      onLoadedData: { event: "loadedData" } as never,
      onLoadedDataCapture: { event: "loadedDataCapture" } as never,
      onLoadedMetadata: { event: "loadedMetadata" } as never,
      onLoadedMetadataCapture: { event: "loadedMetadataCapture" } as never,
      onLostPointerCapture: { event: "lostPointerCapture" } as never,
      onLostPointerCaptureCapture: {
        event: "lostPointerCaptureCapture",
      } as never,
      onMouseDown: { event: "mouseDown" } as never,
      onMouseDownCapture: { event: "mouseDownCapture" } as never,
      onMouseEnter: { event: "mouseEnter" } as never,
      onMouseLeave: { event: "mouseLeave" } as never,
      onMouseMove: { event: "mouseMove" } as never,
      onMouseMoveCapture: { event: "mouseMoveCapture" } as never,
      onMouseOut: { event: "mouseOut" } as never,
      onMouseOutCapture: { event: "mouseOutCapture" } as never,
      onMouseOver: { event: "mouseOver" } as never,
      onMouseOverCapture: { event: "mouseOverCapture" } as never,
      onMouseUp: { event: "mouseUp" } as never,
      onMouseUpCapture: { event: "mouseUpCapture" } as never,
      onPaste: { event: "paste" } as never,
      onPasteCapture: { event: "pasteCapture" } as never,
      onPause: { event: "pause" } as never,
      onPauseCapture: { event: "pauseCapture" } as never,
      onPlay: { event: "play" } as never,
      onPlayCapture: { event: "playCapture" } as never,
      onPlaying: { event: "playing" } as never,
      onPlayingCapture: { event: "playingCapture" } as never,
      onPointerCancel: { event: "pointerCancel" } as never,
      onPointerCancelCapture: { event: "pointerCancelCapture" } as never,
      onPointerDown: { event: "pointerDown" } as never,
      onPointerDownCapture: { event: "pointerDownCapture" } as never,
      onPointerEnter: { event: "pointerEnter" } as never,
      onPointerLeave: { event: "pointerLeave" } as never,
      onPointerMove: { event: "pointerMove" } as never,
      onPointerMoveCapture: { event: "pointerMoveCapture" } as never,
      onPointerOut: { event: "pointerOut" } as never,
      onPointerOutCapture: { event: "pointerOutCapture" } as never,
      onPointerOver: { event: "pointerOver" } as never,
      onPointerOverCapture: { event: "pointerOverCapture" } as never,
      onPointerUp: { event: "pointerUp" } as never,
      onPointerUpCapture: { event: "pointerUpCapture" } as never,
      onProgress: { event: "progress" } as never,
      onProgressCapture: { event: "progressCapture" } as never,
      onRateChange: { event: "rateChange" } as never,
      onRateChangeCapture: { event: "rateChangeCapture" } as never,
      onReset: { event: "reset" } as never,
      onResetCapture: { event: "resetCapture" } as never,
      onResize: { event: "resize" } as never,
      onResizeCapture: { event: "resizeCapture" } as never,
      onScroll: { event: "scroll" } as never,
      onScrollCapture: { event: "scrollCapture" } as never,
      onSeeked: { event: "seeked" } as never,
      onSeekedCapture: { event: "seekedCapture" } as never,
      onSeeking: { event: "seeking" } as never,
      onSeekingCapture: { event: "seekingCapture" } as never,
      onSelect: { event: "select" } as never,
      onSelectCapture: { event: "selectCapture" } as never,
      onStalled: { event: "stalled" } as never,
      onStalledCapture: { event: "stalledCapture" } as never,
      onSubmit: { event: "submit" } as never,
      onSubmitCapture: { event: "submitCapture" } as never,
      onSuspend: { event: "suspend" } as never,
      onSuspendCapture: { event: "suspendCapture" } as never,
      onTimeUpdate: { event: "timeUpdate" } as never,
      onTimeUpdateCapture: { event: "timeUpdateCapture" } as never,
      onToggle: { event: "toggle" } as never,
      onTouchCancel: { event: "touchCancel" } as never,
      onTouchCancelCapture: { event: "touchCancelCapture" } as never,
      onTouchEnd: { event: "touchEnd" } as never,
      onTouchEndCapture: { event: "touchEndCapture" } as never,
      onTouchMove: { event: "touchMove" } as never,
      onTouchMoveCapture: { event: "touchMoveCapture" } as never,
      onTouchStart: { event: "touchStart" } as never,
      onTouchStartCapture: { event: "touchStartCapture" } as never,
      onTransitionCancel: { event: "transitionCancel" } as never,
      onTransitionCancelCapture: { event: "transitionCancelCapture" } as never,
      onTransitionEnd: { event: "transitionEnd" } as never,
      onTransitionEndCapture: { event: "transitionEndCapture" } as never,
      onTransitionRun: { event: "transitionRun" } as never,
      onTransitionRunCapture: { event: "transitionRunCapture" } as never,
      onTransitionStart: { event: "transitionStart" } as never,
      onTransitionStartCapture: { event: "transitionStartCapture" } as never,
      onVolumeChange: { event: "volumeChange" } as never,
      onVolumeChangeCapture: { event: "volumeChangeCapture" } as never,
      onWaiting: { event: "waiting" } as never,
      onWaitingCapture: { event: "waitingCapture" } as never,
      onWheel: { event: "wheel" } as never,
      onWheelCapture: { event: "wheelCapture" } as never,
    },
  },
);
