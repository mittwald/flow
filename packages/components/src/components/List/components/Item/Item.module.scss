@use "@/styles/mixins/focus";

.listItem {
  padding: var(--list-item--padding);
  background-color: var(--list-item--background-color--default);
  &:not(:last-child) {
    border-bottom-color: var(--list-item--border-color);
    border-bottom-width: var(--list-item--border-width);
    border-bottom-style: var(--list-item--border-style);
  }
  display: grid;
  grid-column-gap: var(--list-item--content-to-content-spacing);

  grid-template-areas:
    "avatar title    content contextMenu"
    "avatar subtitle content contextMenu";
  grid-template-columns: auto 40ch 1fr auto;

  &:not(:has(.contextMenu)) {
    grid-template-areas:
      "avatar title    content"
      "avatar subtitle content";
    grid-template-columns: auto 40ch 1fr;
  }

  &:not(:has(.avatar)) {
    grid-template-areas:
      "title    content contextMenu"
      "subtitle content contextMenu";
    grid-template-columns: 40ch 1fr auto;

    &:not(:has(.contextMenu)) {
      grid-template-areas:
        "title    content"
        "subtitle content";
      grid-template-columns: 40ch 1fr;
    }
  }

  &:not(:has(.text)) {
    grid-template-areas: "avatar title content contextMenu";

    &:not(:has(.avatar)) {
      grid-template-areas: "title content contextMenu";

      &:not(:has(.contextMenu)) {
        grid-template-areas: "title content";
      }
    }
  }
}

a.listItem {
  @include focus.focus;
  outline-offset: calc(var(--size-px--xs) * -1);

  &:hover {
    background-color: var(--list-item--background-color--hover);
  }

  &[data-pressed] {
    background-color: var(--list-item--background-color--pressed);
  }
}

.avatar {
  grid-area: avatar;
  align-self: center;
}

.heading {
  grid-area: title;
  align-self: center;
}

.text {
  grid-area: subtitle;
  font-size: var(--list-item--subtitle-font-size);
}

.content {
  grid-area: content;
}

.contextMenu {
  grid-area: contextMenu;
  align-self: center;
}
