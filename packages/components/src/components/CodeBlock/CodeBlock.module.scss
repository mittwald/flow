.codeBlock {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  border-radius: var(--code-block--corner-radius);
  padding: var(--code-block--padding);
  column-gap: var(--code-block--code-to-button-spacing);
  font-size: var(--code-block--font-size);
  font-family: FiraCode, "monospace";

  > pre > code {
    text-shadow: none;
  }

  @mixin variant($color) {
    &:where(.#{$color}) {
      color: var(--code-block--#{$color}-content-color);
      background-color: var(--code-block--#{$color}-background-color);

      :global(.hljs-addition) {
        color: var(--code-block--#{$color}-syntax-color-addition);
      }

      :global(.hljs-built_in) {
        color: var(--code-block--#{$color}-syntax-color-built-in);
      }

      :global(.hljs-bullet) {
        color: var(--code-block--#{$color}-syntax-color-bullet);
      }

      :global(.hljs-code) {
        color: var(--code-block--#{$color}-syntax-color-code);
      }

      :global(.hljs-comment) {
        color: var(--code-block--#{$color}-syntax-color-comment);
      }

      :global(.hljs-deletion) {
        color: var(--code-block--#{$color}-syntax-color-deletion);
      }

      :global(.hljs-link) {
        color: var(--code-block--#{$color}-syntax-color-link);
      }

      :global(.hljs-literal) {
        color: var(--code-block--#{$color}-syntax-color-literal);
      }

      :global(.hljs-meta) {
        color: var(--code-block--#{$color}-syntax-color-meta);
      }

      :global(.hljs-meta-string) {
        color: var(--code-block--#{$color}-syntax-color-meta-string);
      }

      :global(.hljs-number) {
        color: var(--code-block--#{$color}-syntax-color-number);
      }

      :global(.hljs-quote) {
        color: var(--code-block--#{$color}-syntax-color-quote);
      }

      :global(.hljs-regexp) {
      }

      //---

      :global(.hljs-subst) {
        color: var(--code-block--#{$color}-content-color);
      }

      :global(.hljs-type),
      :global(.hljs-string),
      :global(.hljs-selector-id),
      :global(.hljs-selector-class),
      :global(.hljs-quote),
      :global(.hljs-template-tag),
      :global(.hljs-title),
      :global(.hljs-section) {
        color: var(--code-block--#{$color}-content-accent-color-2);
      }

      :global(.hljs-symbol),
      :global(.hljs-variable),
      :global(.hljs-template-variable),
      :global(.hljs-selector-attr),
      :global(.hljs-selector-pseudo) {
        color: var(--code-block--#{$color}-content-accent-color-3);
      }
    }
  }

  @include variant(default);
  @include variant(light);
  @include variant(dark);
}
