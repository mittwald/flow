@use "@/styles/mixins/ellipsis";
@use "@/styles/mixins/focus";

.button {
  position: relative;
  font-family: "Inter", sans-serif;
  line-height: var(--line-height--default);
  border: none;
  border-radius: var(--button--corner-radius);
  padding-block: var(--button--padding-squished-y);
  padding-inline: var(--button--padding-squished-x);
  font-size: var(--font-size--default);
  font-weight: bold;
  transition-property: color, background-color;
  transition-duration: var(--transition--duration--default);
  max-width: 100%;
  display: grid;
  align-items: center;
  grid-template-areas: "content";
  width: fit-content;

  @include focus.focus;

  @extend .primary;
  @extend .solid;

  /* Elements */
  .content {
    display: flex;
    column-gap: var(--button--text-to-icon-spacing);
    align-items: center;
    justify-content: center;
  }

  .content,
  .stateIcon {
    grid-area: content;
  }

  .stateIcon {
    color: var(--button--pending-icon-color);
    justify-self: center;
  }

  &:where(:has(.avatar)) {
    padding: 0;
    border-radius: var(--corner-radius--round);
  }

  &:where(:has(.icon):not(:has(.text))) {
    padding: var(--button--padding);
  }

  &:where(:has(.text) .icon) {
    margin-inline-start: var(--button--text-to-icon-spacing);
  }

  /* States */

  &.isSucceeded {
    .stateIcon {
      color: var(--button--succeeded-icon-color);
    }
  }

  &.isFailed {
    .stateIcon {
      color: var(--button--failed-icon-color);
    }
  }

  &.isPending,
  &.isFailed,
  &.isSucceeded {
    .content {
      opacity: 0;
    }
    &.plain {
      .content:has(.text) {
        opacity: 1;
      }
    }
  }

  /* Size */

  &:where(.size-s) {
    font-size: var(--button--font-size-s);
    padding-block: var(--button--padding-s-squished-y);
    padding-inline: var(--button--padding-s-squished-x);
    column-gap: var(--button--text-to-icon-spacing-s);

    &:where(:has(.icon):not(:has(.text))) {
      padding: var(--button--padding-s);
    }

    .content {
      column-gap: var(--button--text-to-icon-spacing-s);
    }
  }

  /* Variants */

  @mixin variant($color, $variant) {
    &:where(.#{$color}.#{$variant}) {
      background-color: var(
        --button--#{$color}-#{$variant}-background-color--default
      );

      color: var(--button--#{$color}-#{$variant}-content-color--default);

      &:hover {
        background-color: var(
          --button--#{$color}-#{$variant}-background-color--hover
        );

        color: var(--button--#{$color}-#{$variant}-content-color--hover);
      }

      &[data-pressed] {
        background-color: var(
          --button--#{$color}-#{$variant}-background-color--pressed
        );

        color: var(--button--#{$color}-#{$variant}-content-color--pressed);
      }

      &[disabled],
      &.ariaDisabled,
      &.isPending,
      &.isFailed,
      &.isSucceeded {
        background-color: var(--button--disabled-#{$variant}-background-color);
        color: var(--button--disabled-#{$variant}-content-color);
      }
    }
  }

  @include variant(primary, solid);
  @include variant(accent, solid);
  @include variant(danger, solid);
  @include variant(secondary, solid);
  @include variant(static-black, solid);
  @include variant(static-white, solid);
  @include variant(primary, plain);
  @include variant(accent, plain);
  @include variant(danger, plain);
  @include variant(secondary, plain);
  @include variant(static-black, plain);
  @include variant(static-white, plain);
  @include variant(primary, soft);
  @include variant(accent, soft);
  @include variant(danger, soft);
  @include variant(secondary, soft);
  @include variant(static-black, soft);
  @include variant(static-white, soft);
}
