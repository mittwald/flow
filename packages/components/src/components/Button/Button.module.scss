@use "@/styles/mixins/ellipsis";

.button {
  position: relative;
  font-family: "Inter", sans-serif;
  border: none;
  border-radius: var(--button--corner-radius);
  padding-block: var(--button--padding-squished-y);
  padding-inline: var(--button--padding-squished-x);
  font-size: var(--font-size--default);
  font-weight: bold;
  transition-property: color, background-color;
  transition-duration: var(--transition--duration--default);
  outline-color: var(--button--focus-outline-color);
  outline-offset: var(--button--focus-outline-offset);
  max-width: 100%;
  display: flex;
  align-items: center;
  column-gap: var(--button--text-to-icon-spacing);

  @extend .primary;
  @extend .solid;

  &:has(.icon):not(:has(.text)) {
    padding: var(--button--padding);
  }

  &:has(.content) {
    display: grid;
    justify-content: center;
    align-items: center;
    grid-template-areas: "content";
  }
}

.content {
  display: flex;
  column-gap: var(--button--text-to-icon-spacing);
}

.content,
.stateIcon {
  grid-area: content;
}

.text {
  @include ellipsis.ellipsis;
  display: block;
}

.icon,
.icon svg {
  display: block;
}

.size-s {
  font-size: var(--button--font-size-s);
  padding-block: var(--button--padding-s-squished-y);
  padding-inline: var(--button--padding-s-squished-x);
  column-gap: var(--button--text-to-icon-spacing-s);

  &:has(.icon):not(:has(.text)) {
    padding: var(--button--padding-s);
  }

  .content {
    column-gap: var(--button--text-to-icon-spacing-s);
  }
}

.stateIcon {
  color: var(--button--pending-icon-color);
  justify-self: center;
}

.isSucceeded {
  .stateIcon {
    color: var(--button--succeeded-icon-color);
  }
}

.isFailed {
  .stateIcon {
    color: var(--button--failed-icon-color);
  }
}

.isPending,
.isFailed,
.isSucceeded {
  .content {
    visibility: hidden;
  }
  &.plain {
    .content:has(.text) {
      visibility: visible;
    }
  }
}

/* Variants */
@mixin variant($variant, $style) {
  .#{$variant}.#{$style} {
    background-color: var(
      --button--#{$variant}-#{$style}-background-color--default
    );
    color: var(--button--#{$variant}-#{$style}-content-color--default);

    &:hover {
      background-color: var(
        --button--#{$variant}-#{$style}-background-color--hover
      );
      color: var(--button--#{$variant}-#{$style}-content-color--hover);
    }

    &[data-pressed] {
      background-color: var(
        --button--#{$variant}-#{$style}-background-color--pressed
      );
      color: var(--button--#{$variant}-#{$style}-content-color--pressed);
    }

    &[disabled] {
      background-color: var(--button--disabled-#{$style}-background-color);
      color: var(--button--disabled-#{$style}-content-color);
    }
  }
}

@include variant(primary, solid);
@include variant(accent, solid);
@include variant(danger, solid);
@include variant(secondary, solid);
@include variant(primary, plain);
@include variant(accent, plain);
@include variant(danger, plain);
@include variant(secondary, plain);
@include variant(primary, soft);
@include variant(accent, soft);
@include variant(danger, soft);
@include variant(secondary, soft);
